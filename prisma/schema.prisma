// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                      String                    @id @default(cuid())
  name                    String?
  email                   String?                   @unique
  emailVerified           DateTime?
  image                   String?
  bio                     String                    @default("") @db.VarChar(255)
  verified                Boolean                   @default(false)
  accounts                Account[]
  sessions                Session[]
  cheatsheets             Cheatsheet[]
  questionPapers          QuestionPaper[]
  notes                   Notes[]
  solutions               Solution[]
  cheatsheetVotes         CheatsheetVote[]
  questionPaperVotes      QuestionPaperVote[]
  notesVotes              NotesVote[]
  solutionVotes           SolutionVote[]
  questionPaperDifficulty QuestionPaperDifficulty[]
  starredModules          StarredModules[]
  cheatsheetStatuses      CheatsheetStatus[]
  questionPaperStatuses   QuestionPaperStatus[]
  notesStatuses           NotesStatus[]
  solutionStatuses        SolutionStatus[]
  cheatsheetReports       CheatsheetReport[]
  questionPaperReports    QuestionPaperReport[]
  notesReports            NotesReport[]
  solutionReports         SolutionReport[]
  cheatsheetComments      CheatsheetComment[]
  questionPaperComments   QuestionPaperComment[]
  notesComments           NotesComment[]
  solutionComments        SolutionComment[]
  cheatsheetReplies       CheatsheetReply[]
  questionPaperReplies    QuestionPaperReply[]
  notesReplies            NotesReply[]
  solutionReplies         SolutionReply[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Cheatsheet {
  id            String              @id @default(cuid())
  name          String
  createdAt     DateTime            @default(now())
  userSubmitted User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  moduleCode    String
  acadYear      String
  semester      SemesterType
  type          ExamType
  votes         CheatsheetVote[]
  statuses      CheatsheetStatus[]
  reports       CheatsheetReport[]
  comments      CheatsheetComment[]

  @@index([userId])
}

model QuestionPaper {
  id               String                    @id @default(cuid())
  name             String
  createdAt        DateTime                  @default(now())
  userSubmitted    User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String
  moduleCode       String
  acadYear         String
  semester         SemesterType
  solutionIncluded Boolean                   @default(false)
  type             ExamType
  votes            QuestionPaperVote[]
  difficulties     QuestionPaperDifficulty[]
  statuses         QuestionPaperStatus[]
  reports          QuestionPaperReport[]
  solutions        Solution[]
  comments         QuestionPaperComment[]

  @@index([userId])
}

model Notes {
  id            String         @id @default(cuid())
  name          String
  createdAt     DateTime       @default(now())
  userSubmitted User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
  moduleCode    String
  acadYear      String
  semester      SemesterType
  votes         NotesVote[]
  statuses      NotesStatus[]
  reports       NotesReport[]
  comments      NotesComment[]

  @@index([userId])
}

model Solution {
  id              String            @id @default(cuid())
  name            String
  createdAt       DateTime          @default(now())
  userSubmitted   User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  questionPaper   QuestionPaper     @relation(fields: [questionPaperId], references: [id], onDelete: Cascade)
  questionPaperId String
  votes           SolutionVote[]
  statuses        SolutionStatus[]
  reports         SolutionReport[]
  comments        SolutionComment[]

  @@index([userId])
  @@index([questionPaperId])
}

model CheatsheetVote {
  value      Boolean /// true = upvote, false = downvote
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   Cheatsheet @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
}

model QuestionPaperVote {
  value      Boolean /// true = upvote, false = downvote
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   QuestionPaper @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
}

model NotesVote {
  value      Boolean /// true = upvote, false = downvote
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   Notes   @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
}

model SolutionVote {
  value      Boolean /// true = upvote, false = downvote
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   Solution @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
}

model CheatsheetStatus {
  status     ResourceStatus
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   Cheatsheet     @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
}

model QuestionPaperStatus {
  status     ResourceStatus
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   QuestionPaper  @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
}

model NotesStatus {
  status     ResourceStatus
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   Notes          @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
}

model SolutionStatus {
  status     ResourceStatus
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   Solution       @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
}

model QuestionPaperDifficulty {
  value      Int
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   QuestionPaper @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
}

model StarredModules {
  moduleCode String
  userId     String
  user       User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, moduleCode])
}

model CheatsheetReport {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resolved   Boolean    @default(false)
  resource   Cheatsheet @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@index([userId])
  @@index([resourceId])
}

model QuestionPaperReport {
  id         String        @id @default(cuid())
  createdAt  DateTime      @default(now())
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resolved   Boolean       @default(false)
  resource   QuestionPaper @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@index([userId])
  @@index([resourceId])
}

model NotesReport {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resolved   Boolean  @default(false)
  resource   Notes    @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String

  @@index([userId])
  @@index([resourceId])
}

model SolutionReport {
  id         String     @id @default(cuid())
  createdAt  DateTime   @default(now())
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  type       ReportType
  resource   Solution   @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String
  resolved   Boolean    @default(false)

  @@index([userId])
  @@index([resourceId])
}

model CheatsheetComment {
  id         String            @id @default(cuid())
  createdAt  DateTime          @default(now())
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   Cheatsheet        @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String
  content    String            @db.Text
  replies    CheatsheetReply[]

  @@index([userId])
  @@index([resourceId])
}

model QuestionPaperComment {
  id         String               @id @default(cuid())
  createdAt  DateTime             @default(now())
  user       User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   QuestionPaper        @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String
  content    String               @db.Text
  replies    QuestionPaperReply[]

  @@index([userId])
  @@index([resourceId])
}

model NotesComment {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   Notes        @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String
  content    String       @db.Text
  replies    NotesReply[]

  @@index([userId])
  @@index([resourceId])
}

model SolutionComment {
  id         String          @id @default(cuid())
  createdAt  DateTime        @default(now())
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resource   Solution        @relation(fields: [resourceId], references: [id], onDelete: Cascade)
  resourceId String
  content    String          @db.Text
  replies    SolutionReply[]

  @@index([userId])
  @@index([resourceId])
}

model CheatsheetReply {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   CheatsheetComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  content   String            @db.Text

  @@index([userId])
  @@index([commentId])
}

model QuestionPaperReply {
  id        String               @id @default(cuid())
  createdAt DateTime             @default(now())
  user      User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   QuestionPaperComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  content   String               @db.Text

  @@index([userId])
  @@index([commentId])
}

model NotesReply {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   NotesComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  content   String       @db.Text

  @@index([userId])
  @@index([commentId])
}

model SolutionReply {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  comment   SolutionComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId String
  content   String          @db.Text

  @@index([userId])
  @@index([commentId])
}

/// WARNING: CHANGE CONTENT.TS IF CHANGING THIS
enum SemesterType {
  semester1
  semester2
  specialTerm1
  specialTerm2
}

enum ExamType {
  Midterm
  Final
  Quiz
  Assignment
  PE
  Other
}

enum ResourceStatus {
  Completed
  Todo
  Saved
}

enum ReportType {
  inappropriateFilename
  inappropriateUsername
  incorrectModule
  incorrectCategory
  incorrectAcadYear
  incorrectSemester
  incorrectExamType
}
